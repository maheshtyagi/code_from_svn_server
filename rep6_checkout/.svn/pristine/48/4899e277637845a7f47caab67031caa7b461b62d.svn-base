<?xml version="1.0"?>
<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
<!-
<!-   Upgrade automation script
<!-
<!-
<!- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
<!-
<!-    Copyright:
<!-      Company:   cadienttalent
<!-      Updated:   3\7\2011 jeffrey.keil
<!-
<!- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<project name="upgrade.BOM" default="Repeat-BOM-Install" basedir=".">
	<property environment="env"/>

	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
	<!--   This script uses a property file that is generated by getLocalUpgradeProperties.pl -->
	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->

	<property file="antBomUpgradeLocal.properties" />
	<property file="file.properties" />
	<property file="buildTime.properties" />
	<!--<property name="ftp.dir" value="/export/data/dev-ftp/azetra/packages" />-->
        <property name="BOM.local.dir" value="."/>
	<property name="propfile.exists" value="false"/>


  <!--
  <property name="new.sr.number" value=""/>
  <property name="old.sr.number" value=""/>
  <property name="base.vm.name" value="VMImage_8.8SR_" />
  <property name="is.dev.ftp" value=""/>
  <property name="manual.BOM.path" value=""/>
  <property name="is.manual.BOM" value=""/>
  <property name="manual.BOM.version" value=""/>
  <property name="manual.BOM.zip.version" value=""/>
  <property name="major.release.number" value="" />
  <property name="current.release.number" value="" />
  -->

  <property name="new.vm.name" value="${base.vm.name}${new.sr.number}" />
  <property name="old.vm.name" value="${base.vm.name}${old.sr.number}" />
  <property name="BOM.local.dir" value="."/>
  <property name="propfile.exists" value="false"/>
  <property name="vm.server.ip" value="bo2-vmhost02.corp.unicru.com" />
  <property name="vm.app.server.name" value="KWS-US-BOMVSR1.CORP.UNICRU.COM"/>
  <property name="vm.db.server.name" value="KDB-US-BOMVSR1.CORP.UNICRU.COM"/>
  <property name="vm.username" value="svcbomvsr"/>
  <property name="vm.password" value="[$vi9jJ7!?1L~N2X"/>
  <property name="vm.apps.home" value ="/home/rebuild/Bamboo/apps"/>


<target name="show.props" description="Show the user the property settings">
		<echo message="===> java.home value is ${java.home}" level="info" />
		<echo message="===> jboss.home value is ${jboss.home}" level="info" />
		<echo message="===> atao.username value is ${atao.username}" level="info" />
		<echo message="===> database.sid value is ${database.sid}" level="info" />
		<echo message="===> bind.address value is ${bind.address}" level="info" />
		<echo message="===> jboss.port value is ${jboss.port}" level="info" />
		<echo message="===> jboss.partition.udpGroup value is ${jboss.partition.udpGroup}" level="info" />
		<echo message="===> jboss.partition.name value is ${jboss.partition.name}" level="info" />
		<echo message="===> jboss.jndi.port value is ${jboss.jndi.port}" level="info" />
    <echo message="===> cwd value is ${basedir}" level="info" />
    <echo message="===> BOM.local.dir value is ${BOM.local.dir}" level="info" />
	</target>

	<target name="mark.as.verified">
    <exec executable="perl">
      <arg line="verifyBOMFile.pl"/>
      <!--arg line="dev-ftp"/-->
      <arg line="it-peace.corp.unicru.com"/>
      <arg line="BOMs/8.7/8.7.7.0/"/>
    </exec>
	</target>


<!-- Target to check if the VM names confirms to the standard -->

  <target  name="verify.vm.names">

       <regexp id="vm.name.pattern" pattern="^VMImage_[0-9]+\.[0-9]+SR\_(SR[0-9]+)+(HF[0-9]+)*$"/>

       <echo message="Checking for new VM name:-${new.vm.name}"/>

       <condition property="new.vm.name.okay">
           <matches string="${new.vm.name}">
               <regexp refid="vm.name.pattern"/>
           </matches>
       </condition>

       <fail message="Your VM name should confirm to the standard as example VMImage_9.0SR_SR5HF2"
             unless="new.vm.name.okay"/>

       <echo message="Checking for old VM name:-${old.vm.name}"/>

       <condition property="old.vm.name.okay">
           <matches string="${old.vm.name}">
               <regexp refid="vm.name.pattern"/>
           </matches>
       </condition>

       <fail message="Your VM name should confirm to the standard as example VMImage_9.0SR_SR5HF2"
             unless="old.vm.name.okay"/>

   </target>

   <!-- BOM verification notification target added as per the request -->

    <target name="notify-mail-list" description="Notify everyone in mail.list of BOM copy location">
        <mail mailhost="smtp.pdx.corp.unicru.com" mailport="25" subject="BOM verification started for ${branch}:Phase ${bom.verify.phase}" tolist="${bom.verify.notification}" failonerror="false">
            <from address="Releng@cadienttalent.com"/>
            <replyto address="Releng@cadienttalent.com"/>
            <to address="Releng@cadienttalent.com"/>
               <message>

                   The BOM verification has started for ${branch} :Phase ${bom.verify.phase}
                   ==========================================================
                   Major release:${major.release.number}
                   Current release number:-${current.release.number}
                   BOM version getting Installed:-${ftp.file}

               </message>
        </mail>
            <echo message="Successfully sent mail to ${bom.verify.notification}" level="info" />
  </target>

   <target name="run.primary.backup"  >
      	<echo message="===> cwd value is  ${basedir}/${BOM.local.dir}/BOMInstall.xml" level="info" />
	<ant antfile="${basedir}/${BOM.local.dir}/BOMInstall.xml" target="primaryBackup" inheritAll="false" />
   </target>

   <target name="run.secondary.backup"  >
      <ant antfile="${basedir}/${BOM.local.dir}/BOMInstall.xml" target="secondaryBackup" inheritAll="false"/>
   </target>

   <target name="run.primary.install"  >
      <ant antfile="${basedir}/${BOM.local.dir}/BOMInstall.xml" target="primaryInstall" inheritAll="false" />
   </target>

   <target name="run.secondary.install"  >
     <ant antfile="${basedir}/${BOM.local.dir}/BOMInstall.xml" target="secondaryInstall" inheritAll="false"/>
   </target>

   <target name="run.primary.restore"  >
      <ant antfile="${basedir}/${BOM.local.dir}/BOMInstall.xml" target="primaryRestore" inheritAll="false" />
   </target>

   <target name="run.secondary.restore"  >
     <ant antfile="${basedir}/${BOM.local.dir}/BOMInstall.xml" target="secondaryRestore" inheritAll="false"/>
   </target>

            <target name="start-jboss" description="Start the JBoss 6 server." depends="cleanout-jboss-generated-files">
	                      <chmod file="${basedir}/antRunAsync.sh" perm="ugo+rwx"/>
	                      <fixcrlf srcDir="${basedir}" includes="antRunAsync.sh" eol="lf"/>
	                      <exec executable="${basedir}/antRunAsync.sh" failonerror="yes">
						 	<env key="ANTRUN_NOHUP" value="true"/>
						 	<arg value="standalone.sh"/>
						 	<arg line=" -c standalone-full-ha.xml"/>
						 	<arg line=" -b 0.0.0.0"/>
						 	<arg line="-Djboss.messaging.group.address=${udp.address}"/>
						</exec>

				  <!-- RE-798 Replacing fixed sleep waiting value with conditional "Waitfor" -->
						<echo message="=========> Waiting for url http://${env.HOSTNAME}:8080/index.jsp?applicationName=admin to start"
						   level="info"/>
						<waitfor maxwait="8" maxwaitunit="minute" checkevery="30" checkeveryunit="second">
							 <http url="http://${env.HOSTNAME}:8080/index.jsp?applicationName=admin"/>
						</waitfor>
						<echo message="====Application http://${env.HOSTNAME}:8080/index.jsp?applicationName=admin is up" level="info"/>
				    </target>

    <target name="stop-jboss" description="Stop the  JBoss 6 server."  depends="show.props" >
            <exec executable="${jboss.home}/bin/stopjboss6.sh" failonerror="false">
           </exec>
    </target>

    <target name="backup-existing-deployment">
        <!-- First delete previous backup app server deployment -->
        <delete dir="${jboss.home}.old" failonerror="true"/>
        <!-- Verify that delete was successful-->
        <available file="${jboss.home}.old" property="jboss.home.old.notDeleted"/>
        <fail if="jboss.home.old.notDeleted" message="Previous app server backup not deleted"/>
        <!-- then copy previous app server dir to backup -->
        <copy todir="${jboss.home}.old" failonerror="true">
        	<fileset dir="${jboss.home}"/>
        </copy>
        <!-- Verify that copy was successful-->
        <available file="${jboss.home}.old" property="jboss.home.copied"/>
        <fail unless="jboss.home.copied" message="Previous app server dir not copied"/>
    </target>

    <target name="cleanout-jboss-generated-files">
        <parallel>
            <delete dir="${jboss.server.home.dir}/tmp"  failonerror="false"/>
            <delete dir="${jboss.server.home.dir}/data" failonerror="false"/>
            <delete dir="${jboss.server.home.dir}/log" failonerror="false"/>
        </parallel>
    </target>

    <target name="unzip.BOM"  description="unzip the BOM to a directory of the same name" >
    	<echo message="** bom.local.dir ${BOM.local.dir}" level="info"/>
    	<echo message="** ftp.file ${ftp.file}" level="info"/>
	<mkdir dir="${BOM.local.dir}" />
	<unzip src="${ftp.file}" dest="${BOM.local.dir}"/>
    </target>

    <target name="scp.zip"  description="Uses scp to copy the zip file locally">
	<echo message="===>Attempting to fetch the BOM zip from ${ftp.dir}" level="info" />
    <scp trust="true" file="${user}:${password}@${remote.system}:${ftp.dir}/*.zip" todir="."/>
    </target>

    <target name="scp.file" description="Uses scp to copy a remote file to a local directory">
	<echo message="===>Attempting to fetch BOM from ${ftp.dir}/${ftp.file}" level="info" />
	<scp trust="true" file="${user}:${password}@${remote.system}:${ftp.dir}/${ftp.file}" todir="."/>
    </target>

    <target name="create.ant.local.props" description="Create the antBomInstallLocalSettings.properties file">
	<propertyfile
    		file="antBomInstallLocalSettings.properties"
    		comment="overrides for antBomInstallCommonSettings.properties">
      <entry  key="target.db" value="${target.db}"/>
      <entry  key="target.db.alias" value="${target.db.alias}"/>
  		<entry  key="database.tnsnamesentry" value="${database.sid}"/>
  		<entry  key="integrationWebService.endpointURL" value="https://${bind.address}:${jboss.port}/services/IntegrationWebService"/>
  		<entry  key="jvm.max.mem" value="${jvm.max.mem}"/>
	</propertyfile>
    </target>

    <target name="update.logger.props"  description="Update the logger path to a local directory">
	<propertyfile
    		file="${jboss.home}/standalone/deployments/atao.ear/atao.war/WEB-INF/classes/log4j.properties">
 		<entry  key="log4j.appender.modelLogger.File" value="${basedir}/${BOM.local.dir}/modelLogger.log"/>
  		<entry  key="log4j.appender.migrateWFCLogger.File" value="${basedir}/${BOM.local.dir}/migrateWFCLogger.log"/>
 	</propertyfile>
    </target>


    <target name="copy.props" depends="create.ant.local.props" description="Copy the ant property file to the install directory" >
	<copy file="antBomInstallLocalSettings.properties" todir="${BOM.local.dir}"/>
    </target>

   <target name="get.BOM.filename" >
	<!--<fileset id="dist.contents" dir="." includes="*.zip"/>
	<property name="ftp.file" refid="dist.contents"/>-->
	<echo message="===>BOM file is ${ftp.file}"/>
	<basename property="BOM.local.dir" file="./${ftp.file}" suffix=".zip"/>
	<echo message="===>Install directory is ${BOM.local.dir}"/>
   </target>

   <target name="cleanup" description="Get rid of any existing BOM files"  >
	<!--<delete>
    	    <fileset dir="." includes="*.zip"/>
      	</delete>-->
   </target>
   <target name="create.prop.file" depends="check-core-props-file">
    <echo message="==> running perl script to get properties..."/>

 <echo message="major.release.number = :${major.release.number}"/>
<echo message="current.release.number = :${current.release.number}"/>
<echo message="is.dev.ftp = :${is.dev.ftp}"/>
<echo message="manual.bom.path = :${manual.BOM.path}"/>
<echo message="is.manual.bom = :${is.manual.BOM}"/>
<echo message="manual.bom.version = :${manual.BOM.version}"/>
<echo message="manual.BOM.zip.version = :${manual.BOM.zip.version}"/>
	<exec executable="perl">
      	   <arg line="getLocalUpgradeProperties.pl"/>
      	   <arg line="${major.release.number}"/>
      	   <arg line="${current.release.number}"/>
      	   <arg line="${is.dev.ftp}"/>
      	   <arg line="${manual.BOM.path}"/>
      	   <arg line="${is.manual.BOM}"/>
      	   <arg line="${manual.BOM.version}"/>
           <arg line="${manual.BOM.zip.version}" />
           <arg line="${is.test.BOM}"/>
           <arg line="${branch}"/>
    </exec>
    <echo message="loading new properties file"/>
    <loadproperties srcFile="antBomUpgradeLocal.properties"/>
    <loadproperties srcFile="file.properties"/>
    <echo message="ftpdir is : ${ftp.dir} ..."/>
   </target>

  <target name="copy.hibernate.props"  description="Copies over the hibernate config properties from jboss path to local build dir">
    <echo message="copying hibernate props from : ./../../../../jboss/jboss-as/standalone/deployments/atao.ear/atao.war/WEB-INF/classes/atao.hibernate.cfg.xml"/>
    <echo message="copying hibernate props to : ${BOM.local.dir}/libs/atao.hibernate.cfg.xml" />
    <!--<copy file="./../../../../jboss/jboss-as/standalone/deployments/atao.ear/atao.war/WEB-INF/classes/atao.hibernate.cfg.xml" todir="${BOM.local.dir}/libs"/>-->
  </target>

<!-- Target to check for the core properties file required by the build -->
  <target name="check-core-props-file">

      <available property="antBomUpgradeLocal.prop.file" file="${basedir}/antBomUpgradeLocal.properties"/>
      <fail message="antBomUpgradeLocal properties file does not exists:${basedir}/antBomUpgradeLocal.properties">
          <condition>
              <not>
                  <isset property="antBomUpgradeLocal.prop.file"/>
              </not>
           </condition>
      </fail>

      <available property="env.prop.file" file="${basedir}/env.properties"/>
       <fail message="env properties file does not exists:${basedir}/env.properties">
           <condition>
               <not>
                    <isset property="env.prop.file"/>
               </not>
           </condition>
      </fail>

      <available property="file.prop.file" file="${basedir}/file.properties"/>
      <fail message="file properties file does not exists:${basedir}/file.properties">
           <condition>
               <not>
                 <isset property="file.prop.file"/>
               </not>
           </condition>
      </fail>
      <available property="buildTime.prop.file" file="${basedir}/buildTime.properties"/>
            <fail message="buildTime properties file does not exists:${basedir}/buildTime.properties">
                 <condition>
                     <not>
                       <isset property="buildTime.prop.file"/>
                     </not>
                 </condition>
      </fail>
  </target>

  <!--Testing for Bamboo Agent start-->
  <target name="bamboo.start" >
  <echo message="===> Turning on Bamboo-Agent as it shuts down on VM powerdown." />
       <sshexec host="kws-us-bomvsr1.corp.unicru.com"
  	 	username="ataoci45"
  	 	password="ataoci45"
  	 	trust="true"
  command="/home/ataoci45/bamboo-agent1/bin/bamboo-agent.sh start"/>
  </target>

  <target name="just.setup" depends="sleep.before.startup,create.prop.file, show.props, cleanup, setup.bom.dir, update.logger.props, copy.hibernate.props" />
  <target name="all" depends="create.prop.file, show.props,cleanup,  setup.bom.dir, update.logger.props" />
  <target name="setup.bom.dir" depends="scp.zip, get.BOM.filename, unzip.BOM, copy.props" />
  <!--<target name="setup.bom.dir" depends="get.BOM.filename,copy.props" />  -->
   <target name="clean.jboss.start" depends="cleanout-jboss-generated-files,start-jboss" />

    <!-- Repeast BOM Install target.Added as per the bug  -->
    <target name="Repeat-BOM-Install" description="Run BOM Installation including stop and start jboss">
         <antcall target="check-core-props-file"/>
         <antcall target="just.setup"/>
         <antcall target="stop-jboss"/>
         <antcall target="notify-mail-list">
             <param name="bom.verify.phase" value="run.primary.backup"/>
        </antcall>

         <antcall target="run.primary.backup"/>

         <antcall target="notify-mail-list">
             <param name="bom.verify.phase" value="run.primary.install"/>
         </antcall>

         <antcall target="run.primary.install"/>

         <antcall target="notify-mail-list">
             <param name="bom.verify.phase" value="run.primary.restore"/>
         </antcall>

         <antcall target="run.primary.restore"/>

         <antcall target="notify-mail-list">
             <param name="bom.verify.phase" value="run.primary.install"/>
         </antcall>
         <antcall target="run.primary.install"/>
         <antcall target="clean.jboss.start"/>
    </target>

	<target name="Repeat-BOM-BackupInstall" description="Run BOM Installation -BackupOnly">
         <antcall target="check-core-props-file"/>
         <antcall target="just.setup"/>
         <antcall target="stop-jboss"/>
         <antcall target="notify-mail-list">
             <param name="bom.verify.phase" value="run.primary.backup"/>
        </antcall>

         <antcall target="run.primary.backup"/>
         <antcall target="run.primary.install"/>

         <antcall target="clean.jboss.start"/>
    </target>

    <!-- Target called to update install version -->
    <target name="Update-Install-Version" description="Update install version target including stop and start jboss">
         <antcall target="check-core-props-file"/>
         <antcall target="just.setup"/>
         <antcall target="stop-jboss"/>

         <antcall target="notify-mail-list">
             <param name="bom.verify.phase" value="run.primary.backup"/>
         </antcall>
         <antcall target="run.primary.backup"/>

         <antcall target="notify-mail-list">
             <param name="bom.verify.phase" value="run.primary.install"/>
         </antcall>

         <antcall target="run.primary.install"/>
         <antcall target="clean.jboss.start"/>
    </target>

     <target name="sleep.before.startup">
      <echo message="Sleeping for 4 minutes to give the DB server a chance to startup..."/>
      <sleep seconds="20"/>
     </target>

     <target name="sleep.after.shutdown">
      <echo message="Sleeping for 3 minutes to give the VM's time to shutdown..."/>
      <sleep seconds="180"/>
     </target>

    <target name="create.vm.snapshot">
      <antcall target="run.primary.vm.create"/>
      <antcall target="run.primary.vm.powerup"/>
    </target>

    <target name="restore.vm.snapshot">
      <antcall target="run.primary.vm.restore"/>
      <antcall target="run.primary.vm.powerup"/>
    </target>

    <target name="remove.vm.snapshot">
      <antcall target="run.primary.vm.remove"/>
      <antcall target="run.primary.vm.powerup"/>
    </target>

    <target name="create.vm.snapshot.test">
      <echo message="===> Creating new SR VM : ${new.vm.name}." />
      <echo message="===> Turning on SR VM : ${vm.app.server.name}." />
    </target>

    <target name="restore.vm.snapshot.test">
      <echo message="===> Restore to old SR VM : ${old.vm.name}." />
      <echo message="===> Turning on old SR VM : ${vm.app.server.name}." />
    </target>

    <target name="remove.vm.snapshot.test">
      <echo message="===> Remove new SR VM : ${new.vm.name}." />
      <echo message="===> Turning on old SR VM : ${vm.app.server.name}." />
    </target>

    <target name="run.primary.vm.create">
      <echo message="===> Creating new app SR VM snapshot : ${new.vm.name}." />
      <exec executable="perl" failonerror="true">
          <arg value="snapshotmanager.pl"/>
          <arg value="--server"/>
          <arg value="${vm.server.ip}"/>
          <arg value="--vmname"/>
          <arg value="${vm.app.server.name}"/>
          <arg value="--snapshotname"/>
          <arg value="${new.vm.name}"/>
          <arg value="-username"/>
          <arg value="${vm.username}"/>
          <arg value="--password"/>
          <arg value="${vm.password}"/>
          <arg value="--operation"/>
          <arg value="create"/>
      </exec>
      <echo message="===> New db SR VM ${new.vm.name} has been created." />

      <echo message="===> Creating new app SR VM snapshot : ${new.vm.name}." />
      <exec executable="perl" failonerror="true">
          <arg value="snapshotmanager.pl"/>
          <arg value="--server"/>
          <arg value="${vm.server.ip}"/>
          <arg value="--vmname"/>
          <arg value="${vm.db.server.name}"/>
          <arg value="--snapshotname"/>
          <arg value="${new.vm.name}"/>
          <arg value="-username"/>
          <arg value="${vm.username}"/>
          <arg value="--password"/>
          <arg value="${vm.password}"/>
          <arg value="--operation"/>
          <arg value="create"/>
      </exec>
      <echo message="===> New db SR VM ${new.vm.name} has been created." />
    </target>

    <target name="run.primary.vm.restore">
      <echo message="===> Restore to old app SR VM : ${old.vm.name}." />
      <exec executable="perl" failonerror="true">
          <arg value="snapshotmanager.pl"/>
          <arg value="--server"/>
          <arg value="${vm.server.ip}"/>
          <arg value="--vmname"/>
          <arg value="${vm.app.server.name}"/>
          <arg value="--snapshotname"/>
          <arg value="${old.vm.name}"/>
          <arg value="-username"/>
          <arg value="${vm.username}"/>
          <arg value="--password"/>
          <arg value="${vm.password}"/>
          <arg value="--operation"/>
          <arg value="goto"/>
      </exec>
      <echo message="===> Restore app SR VM ${old.vm.name} has been restored." />

      <echo message="===> Restore to old db SR VM : ${old.vm.name}." />
      <exec executable="perl" failonerror="true">
          <arg value="snapshotmanager.pl"/>
          <arg value="--server"/>
          <arg value="${vm.server.ip}"/>
          <arg value="--vmname"/>
          <arg value="${vm.db.server.name}"/>
          <arg value="--snapshotname"/>
          <arg value="${old.vm.name}"/>
          <arg value="-username"/>
          <arg value="${vm.username}"/>
          <arg value="--password"/>
          <arg value="${vm.password}"/>
          <arg value="--operation"/>
          <arg value="goto"/>
      </exec>
      <echo message="===> Restore db SR VM ${old.vm.name} has been restored." />
    </target>

    <target name="run.primary.vm.remove">
      <echo message="===> Removing existing app SR VM : ${new.vm.name}." />
      <exec executable="perl" failonerror="true">
          <arg value="snapshotmanager.pl"/>
          <arg value="--server"/>
          <arg value="${vm.server.ip}"/>
          <arg value="--vmname"/>
          <arg value="${vm.app.server.name}"/>
          <arg value="--snapshotname"/>
          <arg value="${new.vm.name}"/>
          <arg value="--children"/>
          <arg value="0"/>
          <arg value="-username"/>
          <arg value="${vm.username}"/>
          <arg value="--password"/>
          <arg value="${vm.password}"/>
          <arg value="--operation"/>
          <arg value="remove"/>
      </exec>
      <echo message="===> New app SR VM ${new.vm.name} has been removed." />

      <echo message="===> Removing existing db SR VM : ${new.vm.name}." />
      <exec executable="perl" failonerror="true">
          <arg value="snapshotmanager.pl"/>
          <arg value="--server"/>
          <arg value="${vm.server.ip}"/>
          <arg value="--vmname"/>
          <arg value="${vm.db.server.name}"/>
          <arg value="--snapshotname"/>
          <arg value="${new.vm.name}"/>
          <arg value="--children"/>
          <arg value="0"/>
          <arg value="-username"/>
          <arg value="${vm.username}"/>
          <arg value="--password"/>
          <arg value="${vm.password}"/>
          <arg value="--operation"/>
          <arg value="remove"/>
      </exec>
      <echo message="===> New db SR VM ${new.vm.name} has been removed." />
    </target>

    <target name="run.primary.vm.powerup">
      <echo message="===> Turning on app SR VM : ${vm.app.server.name}." />
      <exec executable="perl" failonerror="true">
          <arg value="vmcontrol.pl"/>
          <arg value="--server"/>
          <arg value="${vm.server.ip}"/>
          <arg value="--vmname"/>
          <arg value="${vm.app.server.name}"/>
          <arg value="-username"/>
          <arg value="${vm.username}"/>
          <arg value="--password"/>
          <arg value="${vm.password}"/>
          <arg value="--operation"/>
          <arg value="poweron"/>
      </exec>
      <echo message="===> New app SR VM ${new.vm.name} has been powered up." />

      <echo message="===> Turning on db SR VM : ${vm.db.server.name}." />
      <exec executable="perl" failonerror="true">
          <arg value="vmcontrol.pl"/>
          <arg value="--server"/>
          <arg value="${vm.server.ip}"/>
          <arg value="--vmname"/>
          <arg value="${vm.db.server.name}"/>
          <arg value="-username"/>
          <arg value="${vm.username}"/>
          <arg value="--password"/>
          <arg value="${vm.password}"/>
          <arg value="--operation"/>
          <arg value="poweron"/>
      </exec>
      <echo message="===> New db SR VM ${new.vm.name} has been powered up." />
    </target>

    <target name="run.primary.vm.powerdown">
      <echo message="===> Turning off app SR VM : ${vm.app.server.name}." />
      <exec executable="perl" failonerror="true">
          <arg value="vmcontrol.pl"/>
          <arg value="--server"/>
          <arg value="${vm.server.ip}"/>
          <arg value="--vmname"/>
          <arg value="${vm.app.server.name}"/>
          <arg value="-username"/>
          <arg value="${vm.username}"/>
          <arg value="--password"/>
          <arg value="${vm.password}"/>
          <arg value="--operation"/>
          <arg value="shutdown"/>
      </exec>
      <echo message="===> New app SR VM ${new.vm.name} has been powered down." />

      <echo message="===> Turning off db SR VM : ${vm.db.server.name}." />
      <exec executable="perl" failonerror="true">
          <arg value="vmcontrol.pl"/>
          <arg value="--server"/>
          <arg value="${vm.server.ip}"/>
          <arg value="--vmname"/>
          <arg value="${vm.db.server.name}"/>
          <arg value="-username"/>
          <arg value="${vm.username}"/>
          <arg value="--password"/>
          <arg value="${vm.password}"/>
          <arg value="--operation"/>
          <arg value="shutdown"/>
      </exec>
      <echo message="===> New db SR VM ${new.vm.name} has been powered down." />
    </target>
  </project>



