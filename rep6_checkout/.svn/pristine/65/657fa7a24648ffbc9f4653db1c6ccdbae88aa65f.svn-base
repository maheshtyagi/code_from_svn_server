<?xml version="1.0"?>
<project name="commonUtil" basedir=".">

    <taskdef resource="net/sf/antcontrib/antlib.xml" />
    <taskdef resource="net/sf/incanto/antlib.xml" />
    <property name="user" value="rebuild"/>
    <property name="password" value="Rb20081216"/>
     <path id="svnkit.classpath">
	<fileset dir="${ant.home}/lib">
		<include name="ganymed.jar" />
		<include name="svnkit*.jar" />
		<include name="sequence-library*.jar" />
		<include name="sqljet*.jar" />
		<include name="trilead-ssh2*.jar" />
		<include name="antlr*.jar" />
	</fileset> 
    </path>

    <!-- The Svn4Ant distribution .jar file and all
         dependents must be in ant's classpath -->
        <!-- load the svn task -->
      <typedef resource="org/tigris/subversion/svnant/svnantlib.xml"/> 
      <presetdef name="javac">
           <javac includeantruntime="false" />
      </presetdef>
    <!-- extended variant of parallel that can kill all running threads if one fails -->
      <taskdef name="parallelX" classname="com.kronos.ant.tasks.ParallelX"/>
    <!--classpath="${build.base}/thirdparty/build" -->
    
    <target name="cleanout-jboss-generated-files" depends="set-jboss-deploy-path">
            <parallel>
                <delete dir="${app.server.dir}/server/${jboss.deploy.path}/tmp" failonerror="false"/>
                <delete dir="${app.server.dir}/server/${jboss.deploy.path}/work" failonerror="false"/>
                <delete dir="${app.server.dir}/server/${jboss.deploy.path}/data" failonerror="false"/>
                <delete dir="${app.server.dir}/server/${jboss.deploy.path}/log" failonerror="false"/>
            </parallel>
    </target>
    
    <target name="restart-jboss" depends="stop-jboss43, cleanout-jboss-generated-files,  start-jboss43"/>

  <!-- New target added to validate the BOM file -->
   <target name="antcall-validate-bom-file">
       <ant inheritAll="false" antfile="${build.base}/release.xml">
         <target name="validateBOMFile"/>
           <property name="bom.file.name" value="${bom.file.name}"/>
           <property name="atao.build.number" value="${build.number.root}.${svn.revision.max}"/>
       </ant>
  </target>


    
    <!--Target to backup database -->
    
     <target name="backup-database" description="export current target.db.." depends="set-jboss-deploy-path">
            <move file="export_db.log" tofile="export_db.log.old" verbose="true" failonerror="false"/>
            <record name="export_db.log" action="start"/>
                <xmlproperty file="${app.server.dir}/server/${jboss.deploy.path}/deploy/atao-ds.xml"/>
                <property name="db.user" value="${datasources.local-tx-datasource.user-name}"/>
                <property name="db.pass" value="${datasources.local-tx-datasource.password}"/>
                <echo message="User: ${db.user}"/>
                <echo message="Password: ${db.pass}"/>
    
                <move file="${db.user}.dmp" tofile="${db.user}.dmp.old" verbose="true" failonerror="false"/>
    
                <exec dir="${basedir}" executable="exp" failonerror="true">
                        <arg line="${db.user}/${db.pass}@${db.tnsname} file=${db.user}.dmp owner=${db.user}"/>
                </exec>
            <record name="export_db.log" action="stop"/>
      </target>
    
    <target name="stop-jboss43" description="Stop the Application Server">
            <trycatch property="jboss-stop-error" reference="selenium">
                <try>
                    <!-- see if jboss is running before we try to stop it -->
                    <condition property="isJbossRunning" else="false">
                        <socket server="${jboss.host}" port="${jboss.jndi.port}"/>
                    </condition>
                    <if>
                        <equals arg1="${isJbossRunning}" arg2="false"/>
                        <then>
                            <echo message="No listener found at ${jboss.host}:${jboss.jndi.port}. Not trying to stop JBoss Server"
                                  level="warning"/>
                        </then>
                        <else>
                            <echo message="===> app.server.dir value is ${app.server.dir}" level="info"/>
                            <echo message="=========> Stopping JBoss Server at ${jboss.host}:${jboss.jndi.port}"
                                  level="info"/>
                            <java dir="${app.server.dir}/bin" classname="org.jboss.Shutdown" fork="true">
                                <arg line="--server=${jboss.host}:${jboss.jndi.port}"/>
                                <arg value="--user"/>
                                <arg value="admin"/>
                                <arg value="--password"/>
                                <arg value="admin"/>
                                <classpath>
                                    <pathelement path="${app.server.dir}/bin/shutdown.jar"/>
                                    <pathelement path="${app.server.dir}/client/jbossall-client.jar"/>
                                </classpath>
                            </java>
                            <!--Increase the Timeout value to have proper shutdown of the Jboss server -->
                            <property name="shutdown.delay" value="240"/>
                            <echo message="=========> Waiting ${shutdown.delay} seconds for ${app.server.dir} to stop"
                                  level="info"/>
                            <sleep seconds="${shutdown.delay}"/>
                        </else>
                    </if>
                </try>
                <catch>
                    <echo message="Stop jboss failed.  This may not be an error: ${jboss-stop-error}." level="warning"/>
                </catch>
            </trycatch>
    </target>
    
    <target name="start-jboss43" description="Start the JBoss 4.3 server." depends="cleanout-jboss-generated-files">
        <echo message="===> java.home value is ${java.home.dir}" level="info"/>
         <available file="antRunAsync.sh" property="antRunAsync.script.present"/>
         <if>
             <equals arg1="${antRunAsync.script.present}" arg2="true"/>
         <then>
             <fixcrlf srcDir="${basedir}" includes="antRunAsync.sh" eol="lf"/>
             <chmod file="${basedir}/antRunAsync.sh" perm="ugo+rwx"/>
                 <exec executable="${basedir}/antRunAsync.sh" failonerror="yes">
                        <env key="ANTRUN_NOHUP" value="true"/>
                        <arg value="run.sh"/>
                        <arg line=" -b 0.0.0.0"/>
                        <arg line="-g ${cluster.group}"/>
                        <arg line="-u ${udp.address}"/>
                  </exec>
    
              <property name="startup.delay" value="240"/>
              <echo message="=========> Waiting ${startup.delay} seconds for ${app.server.dir} to start"
                   level="info"/>
                      <sleep seconds="${startup.delay}"/>
               </then>
               <else>
               <echo message="=========> Didn't find file antRunAsync.sh." level="info"/>
                   <echo message="=========> Can't Start the JBoss 4.3 server." level="info"/>
                    <fail message="JBoss 4.3 server Start-Up failed!"/>
                 </else>
        </if>
    </target>

    <!-- Macro Definations -->
    <macrodef name="update-atao-jar-name">
        <attribute name="the.jar" default="foo" />
          <sequential>
              <echo message="${build.base}/${bom.file.name} match=atao-@{the.jar}.*\.jar replace=atao-@{the.jar}-${build.number.root}.${svn.revision.max}.${build.number.iteration}.jar" />
              <!-- Had to do the replacement in two steps - otherwise the regex is "greedy" and replaces the whole line ("byline" parameter of "replaceregexp" task did not seem to work) -->
               <replaceregexp file="${build.base}/${bom.file.name}" match='output/atao-@{the.jar}.*\.jar" *dest' replace='output/atao-@{the.jar}-${build.number.root}.${svn.revision.max}.${build.number.iteration}.jar" dest' />
               <replaceregexp file="${build.base}/${bom.file.name}" match='lib/atao-@{the.jar}.*\.jar' replace='lib/atao-@{the.jar}-${build.number.root}.${svn.revision.max}.${build.number.iteration}.jar' />
          </sequential>
    </macrodef>
    <macrodef name="update-assessment-jar-name">
          <attribute name="the.jar" default="foo" />
             <sequential>
                <echo message="${build.base}/${bom.file.name} match=assessments.@{the.jar}.*\.jar replace=assessments.@{the.jar}-${build.number.root}.${svn.revision.max}.${build.number.iteration}.jar" />
                 <!-- Had to do the replacement in two steps - otherwise the regex is "greedy" and replaces the whole line ("byline" parameter of "replaceregexp" task did not seem to work) -->
                 <replaceregexp file="${build.base}/${bom.file.name}" match='sourceFile="WEB-INF/lib/atao-assessments.@{the.jar}.*\.jar" *dest' replace='sourceFile="WEB-INF/lib/atao-assessments.@{the.jar}-${build.number.root}.${svn.revision.max}.${build.number.iteration}.jar" dest' />
                 <replaceregexp file="${build.base}/${bom.file.name}" match='destinationFile="WEB-INF/lib/atao-assessments.@{the.jar}.*\.jar' replace='destinationFile="WEB-INF/lib/atao-assessments.@{the.jar}-${build.number.root}.${svn.revision.max}.${build.number.iteration}.jar' />
             </sequential>
    </macrodef>

    <target name="prepare-appserver-for-deployment" depends="set-jboss-deploy-path" >
            <!-- Decide whether to keep a backup of the previous jboss directory (may be safer but takes longer and uses more space) -->
            <if>
                <equals arg1="${backup.existing.deployment}" arg2="true" />
                <then>
                    <!-- Have to do this in an antcall so atao.build.number won't be
                     set to previous/old value for the remainder of this build -->
                     <antcall target="backup-existing-deployment"/>
                </then>
            </if>
            <!-- Delete previously deployed .ear directory so packaging step
                 can create new .ear dir & deploy assets/static there -->
            <delete dir="${app.server.dir}/server/${jboss.deploy.path}/deploy/atao.ear" failonerror="true"/>
            <!-- Verify that delete was successful-->
            <available file="${app.server.dir}/server/${jboss.deploy.path}/deploy/atao.ear" property="appserver.ear.previous.notDeleted"/>
            <fail if="appserver.ear.previous.notDeleted" message="Previous deployed appserver ear not deleted"/>
    </target>

     <!-- Export local Configs -->
    <target name="export-local-configs" description="Get env-specific configs from repository">
          <trycatch property="Props-checkout-error">
            <try>
          <java classname="org.tmatesoft.svn.cli.SVN" failonerror="true" fork="true" maxmemory="512m">
          <arg value="--non-interactive"/>
          <arg value="--username"/>
          <arg value="${user}"/>
          <arg value="--password"/>
          <arg value="${password}"/>
          <arg value="--force"/>
          <arg value="--quiet"/>
          <arg value="export" />
          <arg value="${svn.localprops.export.url}"/>
          <arg value="." />
          <classpath refid="svnkit.classpath" />
         </java>
       </try>
       <catch>
          <echo message="Export failed:-${Props-checkout-error}" level="error"/>
      </catch>
     </trycatch>

 
         <!-- bamboo.build.dir will be manually substituted in all repo6 files -->
         <!-- below this directory before the build is started. -->
         <!-- in case this is run on windows, make all slashes forward -->
         <pathconvert targetos="unix" property="bamboo.build.dir">
                 <path location="${basedir}"/>
         </pathconvert>
 
         <replace dir="." value="${bamboo.build.dir}">
                 <include name="localConfigFiles/**/*.properties*"/>
                 <include name="localEarBuild.properties"/>
                 <replacetoken>${bamboo.build.dir}</replacetoken>
         </replace>

         <replace dir="." value="${branch}">
                 <include name="localEarBuild.properties"/>
                <replacetoken>${branch}</replacetoken>
        </replace>

       <replace dir="." value="${email}">
                 <include name="localEarBuild.properties"/>
                <replacetoken>${email}</replacetoken>
       </replace>

 
         <!-- target.db is replaced just below here and set in -->
         <!-- localEarBuild.properties from repo6 -->
         <property file="localEarBuild.properties"/>
 
         <echo message="target.db     = ${target.db}"/>
         <echo message="svn.branch    = ${svn.branch}"/>
         <echo message="atao.major    = ${atao.major}"/>
         <echo message="atao.minor    = ${atao.minor}"/>
         <echo message="atao.service  = ${atao.service}"/>
         <echo message="atao.patch    = ${atao.patch}"/>
         <echo message="atao.version  = ${atao.version}"/>
         <echo message="bom.file.name = ${bom.file.name}"/>
         <echo message="svn.ASSMNTcheckout.url = ${svn.ASSMNTcheckout.url}"/>
         <echo message="ASSMNTfrom.revision    = ${ASSMNTfrom.revision}"/>
 
         <replace dir="." value="${target.db}">
                 <include name="localConfigFiles/**/*.*"/>
                 <replacetoken>${target.db}</replacetoken>
         </replace>
 
         <!-- jbosss.home is replaced just below here -->
         <replace dir="." value="${jboss.home}">
                 <include name="localConfigFiles/**/*.*"/>
                 <replacetoken>${jboss.home}</replacetoken>
         </replace>
 
         <!-- Read in and set local properties-->
         <property name="build.base" value="${build.baseRoot}/atao"/>
         <property name="buildtime.config.path" value="${global.config.path}/buildAndRelease"/>
         <property name="packageinstall.config.path" value="${global.config.path}/packageAndInstall"/>
         <property name="runtime.config.path" value="${global.config.path}/runtime"/>
    </target>
 
    <target name="build-and-add-assessments" description="Build Assessments and add components to aTao release vehicle" if="ASSMNTfrom.revision" >
         <record name="assessments.log" action="start"/>
             <ant antfile="${build.baseRoot}/assessments/build.xml" dir="${build.baseRoot}/assessments" target="new-no-tests" inheritall="false"/>
             <ant antfile="${build.baseRoot}/assessments/build.xml" dir="${build.baseRoot}/assessments" target="exportddl" inheritall="false"/>
             <ant antfile="${build.baseRoot}/assessments/build.xml" dir="${build.baseRoot}/assessments" target="deploy-developer" inheritall="false"/>
 
             <echo message="Add Assessment libraries, binaries, .sql and .csv to release vehicle" level="info" />
 
             <mkdir dir="${build.base}/relWorkArea/${atao.build.number}/wardir/WEB-INF/binaries"/>
             <copy todir="${build.base}/relWorkArea/${atao.build.number}/wardir/WEB-INF/binaries">
                 <fileset dir="${build.baseRoot}/assessments/ScoringLibraries" includes="*.*"/>
             </copy>
 
             <mkdir dir="${build.base}/relWorkArea/${atao.build.number}/wardir/WEB-INF/binaries/64bit"/>
             <copy todir="${build.base}/relWorkArea/${atao.build.number}/wardir/WEB-INF/binaries/64bit">
                 <fileset dir="${build.baseRoot}/assessments/ScoringLibraries/64-bit Shared Libraries" includes="**/*.*"/>
             </copy>
 
             <mkdir dir="${build.base}/WEB-INF/binaries"/>
             <copy todir="${build.base}/WEB-INF/binaries">
                 <fileset dir="${build.baseRoot}/assessments/ScoringLibraries" includes="*.*"/>
             </copy>
 
             <mkdir dir="${build.base}/WEB-INF/binaries/64bit"/>
             <copy todir="${build.base}/WEB-INF/binaries/64bit">
                 <fileset dir="${build.baseRoot}/assessments/ScoringLibraries/64-bit Shared Libraries" includes="**/*.*"/>
             </copy>
 
             <mkdir dir="${build.base}/relWorkArea/${atao.build.number}/misc/sqlscripts/Assessments"/>
             <copy todir="${build.base}/relWorkArea/${atao.build.number}/misc/sqlscripts/Assessments">
                 <fileset dir="${build.baseRoot}/assessments/misc/sqlscripts" includes="**/*.*"/>
             </copy>
             <mkdir dir="${build.base}/relWorkArea/${atao.build.number}/misc/sqlscripts/Assessments/ddl"/>
             <copy todir="${build.base}/relWorkArea/${atao.build.number}/misc/sqlscripts/Assessments/ddl">
                 <fileset dir="${build.baseRoot}/assessments/output/ddl"/>
             </copy>
             <!-- Per RE-46, include the Assessments .csv files in 8.5 release vehicles -->
             <mkdir dir="${build.base}/relWorkArea/${atao.build.number}/misc/Assessments"/>
             <copy todir="${build.base}/relWorkArea/${atao.build.number}/misc/Assessments">
                 <fileset dir="${build.baseRoot}/assessments/misc/Scoring" includes="**/*.csv"/>
             </copy>
             <!-- include the Assessment content and question files in release vehicles -->
             <mkdir dir="${build.base}/relWorkArea/${atao.build.number}/misc/Assessments/Content"/>
             <copy todir="${build.base}/relWorkArea/${atao.build.number}/misc/Assessments/Content">
                 <fileset dir="${build.baseRoot}/assessments/misc/Content" includes="*.csv"/>
             </copy>
             <mkdir dir="${build.base}/relWorkArea/${atao.build.number}/misc/Assessments/Content/ContentImportFiles"/>
             <copy todir="${build.base}/relWorkArea/${atao.build.number}/misc/Assessments/Content/ContentImportFiles">
                 <fileset dir="${build.baseRoot}/assessments/misc/Content/ContentImportFiles" includes="*.csv"/>
             </copy>
         <record name="assessments.log" action="stop"/>
   </target>

   <!-- Target build no release -->
   <target name="build-no-release">
       <record name="build.log" action="start"/>
 		<ant antfile="${build.base}/build.xml" dir="${build.base}" inheritall="false">
 			<target name="new-release"/>
 		</ant>
       <record name="build.log" action="stop"/>
  </target>
     
  <target name="checkout-atao">
      <record name="checkout-atao.log" action="start"/>
      <move file="${build.baseRoot}.old" tofile="${build.baseRoot}.old.delete" failonerror="false"/>
       <!-- Decide whether to keep a backup of the previous checkout directory (may be safer but uses more space) -->
       <if>
            <equals arg1="${keep.build.files}" arg2="true" />
       <then>
           <move file="${build.baseRoot}" tofile="${build.baseRoot}.old" failonerror="false"/>
        </then>
        <else>
          <move file="${build.baseRoot}" tofile="${build.baseRoot}.delete" failonerror="false"/>
         </else>
          </if>
           <!-- Now check out a fresh copy and in parallel delete anything obsolete -->
           <echo message="=========> Check-out a fresh copy of revision ${CIfrom.revision} from ${svn.checkout.url}" level="info" />
            <parallel>
       <trycatch property="atao-checkout-error">
       <try>
        <java classname="org.tmatesoft.svn.cli.SVN" failonerror="true" fork="true" maxmemory="512m">
          <arg value="--non-interactive"/>
          <arg value="--username"/>
          <arg value="${user}"/>
          <arg value="--password"/>
          <arg value="${password}"/>
          <arg value="checkout" />
          <arg value="--quiet"/>
          <arg value="-r"/>
          <arg value="${CIfrom.revision}"/>
          <arg value="${svn.checkout.url}"/>
          <arg value="${build.base}" />
          <classpath refid="svnkit.classpath" />
         </java>
       </try>
       <catch>
          <echo message="Atao checkout failed:-${atao-checkout-error}" level="error"/>
      </catch>
     </trycatch>

   	<delete dir="${build.baseRoot}.delete"     failonerror="false"/>
   	<delete dir="${build.baseRoot}.old.delete" failonerror="false"/>
      </parallel>
                 
       <mkdir dir="${build.base}/WEB-INF/lib"/>
       <antcall target="checkout-assessments"/>
       <antcall target="export-db"/>
       <antcall target="assemble-TMD-help"/>
       <record name="checkout-atao.log" action="stop"/>
   </target>
    
   <target name="checkout-assessments" if="ASSMNTfrom.revision">
         <record name="checkout-assessments.log" action="start"/>
             <echo message="=========> Check-out a fresh copy of revision ${ASSMNTfrom.revision} from ${svn.ASSMNTcheckout.url}" level="info" />
       <trycatch property="assessment-checkout-error">
       <try>
        <java classname="org.tmatesoft.svn.cli.SVN" failonerror="true" fork="true" maxmemory="512m">
          <arg value="--non-interactive"/>
          <arg value="--username"/>
          <arg value="${user}"/>
          <arg value="--password"/>
          <arg value="${password}"/>
          <arg value="checkout" />
          <arg value="--quiet"/>
          <arg value="-r"/>
          <arg value="${ASSMNTfrom.revision}"/>
          <arg value="${svn.ASSMNTcheckout.url}"/>
          <arg value="${build.baseRoot}/assessments" />
          <classpath refid="svnkit.classpath" />
         </java>
       </try>
       <catch>
          <echo message="Assessment checkout failed:-${Assessment-checkout-error}" level="error"/>
      </catch>
     </trycatch>

     <record name="checkout-assessments.log" action="stop"/>
   </target>
     
   <target name="checkout-TMD-help" if="help.from.revision" >
       <record name="checkout-TMD-help.log" action="start"/>
        <trycatch property="help-checkout-error">
       <try>
        <java classname="org.tmatesoft.svn.cli.SVN" failonerror="true" fork="true" maxmemory="512m">
          <arg value="--non-interactive"/>
          <arg value="--username"/>
          <arg value="${user}"/>
          <arg value="--password"/>
          <arg value="${password}"/>
          <arg value="checkout" />
          <arg value="--quiet"/>
          <arg value="${svn.help.checkout.url}"/>
          <arg value="${build.baseRoot}/HelpSource" />
          <classpath refid="svnkit.classpath" />
         </java>
       </try>
       <catch>
          <echo message="Help checkout failed:-${help-checkout-error}" level="error"/>
      </catch>
     </trycatch>
             
      <record name="checkout-TMD-help.log" action="stop"/>
    </target>
   <target name="export-db" if="db.from.revision">
        <record name="export-db.log" action="start"/>
        <echo message="=========> Export a fresh copy of revision ${db.from.revision} from ${svn.db.checkout.url}" level="info" />
        <trycatch property="db-export-error">
       <try>
        <java classname="org.tmatesoft.svn.cli.SVN" failonerror="true" fork="true" maxmemory="512m" >
          <arg value="--non-interactive"/>
          <arg value="--username"/>
          <arg value="${user}"/>
          <arg value="--password"/>
          <arg value="${password}"/>
          <arg value="--force"/>
          <arg value="export" />
          <arg value="--quiet"/>
          <arg value="-r"/>
          <arg value="${db.from.revision}"/>
          <arg value="${svn.db.checkout.url}"/>
          <arg value="${build.baseRoot}/db" />
          <classpath refid="svnkit.classpath" />
         </java>
       </try>
       <catch>
          <echo message="Export failed:-${db-export-error}" level="error"/>
      </catch>
     </trycatch>


         <record name="export-db.log" action="stop"/>
    </target>
   
    <target name="set-jboss-deploy-path">
           <condition property="jboss.deploy.path" value="default">
               <equals arg1="${ant.java.version}" arg2="1.4" />
           </condition>
           <condition property="jboss.deploy.path" value="production">
               <equals arg1="${ant.java.version}" arg2="1.5" />
           </condition>
           <condition property="jboss.deploy.path" value="production">
               <equals arg1="${ant.java.version}" arg2="1.6" />
           </condition>
           <echo message="Java version = ${ant.java.version} so deploy path = server/${jboss.deploy.path}/deploy"/>
    </target>
   
    <target name="copy-buildtime-configfiles">
           <copy todir="${build.base}" overwrite="true" verbose="true">
           	<fileset dir="${buildtime.config.path}" includes="antLocalSettings.properties antGlobalLocalSettings.properties antReleaseLocalSettings.properties"/>
           </copy>
           <copy todir="${build.base}/misc/buildfiles" overwrite="true" verbose="true">
           	<fileset dir="${buildtime.config.path}" includes="custom.properties atao.hibernate.cfg.xml"/>
           </copy>
           <mkdir dir="${build.base}/WEB-INF/classes"/>
           <copy todir="${build.base}/WEB-INF/classes" overwrite="true" verbose="true">
           	<fileset dir="${buildtime.config.path}" includes="log4j.properties atao.hibernate.cfg.xml"/>
           </copy>
           <!-- Start Adding for Assessments build -->
           <copy todir="${build.baseRoot}/assessments" verbose="true">
   	        <fileset dir="${buildtime.config.path}/assessments" includes="antLocalSettings.properties"/>
           </copy>
           <copy todir="${build.baseRoot}/assessments/test/artifacts" verbose="true">
   	        <fileset dir="${buildtime.config.path}/assessments" includes="test.properties"/>
           </copy>
           <!-- End Adding for Assessments build -->
     </target>
   
     <target name="setup-assessmentbuild-number" if="ASSMNTfrom.revision">
          <svn>
             <wcversion path="${build.baseRoot}/assessments" prefix="svn."/>
          </svn>
       	  <echo> Checked-out Revision of Code: ${svn.revision.max} </echo>
          <echo> Build number root           : ${build.number.root} </echo>
          <property name="assmnt.build.number" value="${build.number.root}.${svn.revision.max}.1"/>
          <echo> set atao.build.number to ${assmnt.build.number} in ${build.baseRoot}/assessments/antLocalSettings.properties </echo>
          <echo file="${build.baseRoot}/assessments/antLocalSettings.properties" append="true">atao.build.number=${assmnt.build.number}</echo>
          <property file="${build.baseRoot}/assessments/antLocalSettings.properties"/>
   
          <for list="${assessment.jar.list}" param="jarname">
              <sequential>
                  <echo message="=========> updating entry in assessment.jar.list:@{jarname} " level="info" />
                  <update-assessment-jar-name the.jar="@{jarname}" />
                  <echo message="" />
              </sequential>
          </for>
   
          <if>
             <equals arg1="${ASSMNT.build}" arg2="true"/>
             <then>
           	<echo file="${build.base}/antGlobalLocalSettings.properties" append="true">atao.assessments.build.number=${assmnt.build.number}</echo>
              </then>
          </if>
     </target>
 
      <target name="setup-build-number">
         <svn>
            <wcversion  path="${build.base}" prefix="svn."/>
          </svn>
       	 <echo> Checked-out Revision of Code: ${svn.revision.max} </echo>
         <echo> Build number root           : ${build.number.root} </echo>
         <property name="atao.build.number" value="${atao.version}.${svn.revision.max}"/>
         <echo> set atao.build.number to ${atao.build.number} in antGlobalLocalSettings.properties </echo>
         <replaceregexp file="${build.base}/antGlobalLocalSettings.properties" match="atao.build.number=.*" replace="atao.build.number=${atao.build.number}" flags="g" byline="true"/>
         <property file="${build.base}/antGlobalLocalSettings.properties"/>
          <for list="${atao.jar.list}" param="jarname">
              <sequential>
                   <echo message="=========> updating entry in atao.jar.list:@{jarname} " level="info" />
                   <update-atao-jar-name the.jar="@{jarname}" />
                   <echo message="" />
              </sequential>
           </for>
           <antcall target="setup-assessmentbuild-number" />
     </target>
     
     <target name="assemble-TMD-help" if="help.from.revision" depends="checkout-TMD-help">
       	 <record name="assemble-TMD-help.log" action="start"/>
       	 <unzip src="${build.baseRoot}/HelpSource/TMDHMC.zip" dest="${build.base}/help/HMC"/>
       	 <unzip src="${build.baseRoot}/HelpSource/TMDADM.zip" dest="${build.base}/help/Admin"/>
         <unzip src="${build.baseRoot}/HelpSource/TMDSeeker.zip" dest="${build.base}/help/ce"/>
       	 <record name="assemble-TMD-help.log" action="stop"/>
     </target>
</project>
