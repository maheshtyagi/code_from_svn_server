<project name="build-atao-ear" default="qa-ear-build" basedir=".">

    <taskdef resource="net/sf/antcontrib/antlib.xml" />
    <taskdef resource="net/sf/incanto/antlib.xml" />
    
    <!-- The Svn4Ant distribution .jar file and all
         dependents must be in ant's classpath -->
    <taskdef resource="org/jwaresoftware/svn4ant/install/antlib.xml"/>

    <!-- Read in local properties-->
    <property file="localEarBuild.properties"/>

    <property name="build.base" value="${build.baseRoot}/atao"/>
    <property name="buildtime.config.path" value="${global.config.path}/buildAndRelease"/>
    <property name="packageinstall.config.path" value="${global.config.path}/packageAndInstall"/>
    <property name="package.base" value="${basedir}/packageWorkDir"/>
    <property name="runtime.config.path" value="${global.config.path}/runtime"/>
    <property name="jboss.host" value="localhost" />

    <property environment="env"/>
    <property name="app.server.dir" value="${env.JBOSS_HOME}"/>
    <property name="java.home.dir" value="${env.JAVA_HOME}"/>

    <!-- The default target -->
    <target name="qa-ear-build" depends="stop-jboss43, create-release-vehicle, prepare-appserver-for-deployment, unzip-and-package-release, run-cleanup-sql, run-caladan-upgrade-sql, deploy-ear, copy-runtime-configfiles, copy-import-config-files, preserve-file-system-assets, import-libraries, start-jboss43" />

    <target name="long-ear-build" depends="long-ear-build-nostart, start-jboss43" />
    <target name="long-ear-build-nostart" depends="stop-jboss43, create-release-vehicle, prepare-appserver-for-deployment, unzip-and-package-release, deploy-ear, copy-runtime-configfiles" />
    <target name="create-release-vehicle" depends="checkout-atao, checkout-TMD-help, assemble-TMD-help, copy-buildtime-configfiles, setup-build-number, setup-assessmentbuild-number, build"/>


    <target name="assemble-TMD-help">
    	<record name="assemble-TMD-help.log" action="start"/>
    	<unzip src="${build.baseRoot}/HelpSource/TMDHMC.08.en.zip" dest="${build.base}/help/HMC"/>
    	<unzip src="${build.baseRoot}/HelpSource/TMDADM.08.en.zip" dest="${build.base}/help/Admin"/>
        <unzip src="${build.baseRoot}/HelpSource/TMDSeeker.08.en.zip" dest="${build.base}/help/ce"/>
    	<record name="assemble-TMD-help.log" action="stop"/>
    </target>


    <target name="backup-database" description="export current target.db.." depends="set-jboss-deploy-path">
        <move file="export_db.log" tofile="export_db.log.old" verbose="true" failonerror="false"/>
        <record name="export_db.log" action="start"/>
            <xmlproperty file="${app.server.dir}/server/${jboss.deploy.path}/deploy/atao-ds.xml"/>
            <property name="db.user" value="${datasources.local-tx-datasource.user-name}"/>
            <property name="db.pass" value="${datasources.local-tx-datasource.password}"/>
            <echo message="User: ${db.user}"/>
            <echo message="Password: ${db.pass}"/>
    
            <move file="${db.user}.dmp" tofile="${db.user}.dmp.old" verbose="true" failonerror="false"/>
    
            <exec dir="${basedir}" executable="exp" failonerror="true">
                    <arg line="${db.user}/${db.pass}@${db.tnsname} file=${db.user}.dmp owner=${db.user}"/>
            </exec>
        <record name="export_db.log" action="stop"/>
    </target>


    <target name="backup-existing-deployment" depends="cleanout-jboss-generated-files">
        <property file="${build.base}/antGlobalLocalSettings.properties"/>
        <!-- First delete previous backup app server deployment -->
        <delete dir="${app.server.dir}.old" failonerror="true"/>
        <!-- Verify that delete was successful-->
        <available file="${app.server.dir}.old" property="app.server.dir.old.notDeleted"/>
        <fail if="app.server.dir.old.notDeleted" message="Previous app server backup not deleted"/>
        <!-- then copy previous app server dir to backup -->
        <copy todir="${app.server.dir}.old" failonerror="true">
        	<fileset dir="${app.server.dir}"/>
        </copy>
        <!-- Verify that copy was successful-->
        <available file="${app.server.dir}.old" property="app.server.dir.copied"/>
        <fail unless="app.server.dir.copied" message="Previous app server dir not copied"/>
    </target>


    <target name="build">
      <record name="build.log" action="start"/>
        <if>
            <equals arg1="${clover.coverage}" arg2="true" />
            <then>
                <ant antfile="${build.base}/build.xml" dir="${build.base}" inheritall="false">
                    <target name="use-clover"/>
                    <target name="new-release"/>
                    <!--target name="full-database-export"/-->
                </ant>
                <delete>
                    <fileset dir="${build.base}/WEB-INF/lib" includes="atao-assessments.api-0.0.0.1.jar atao-assessments.impl-0.0.0.1.jar atao-assessments.model-0.0.0.1.jar"/>
                </delete>                
                <antcall target="clover-report-generation"/>
            </then>
            <else>
                <ant antfile="${build.base}/build.xml" dir="${build.base}" inheritall="false">
                    <target name="new-release"/>                     
                    <!--target name="full-database-export"/-->
                </ant>
                <delete>
                    <fileset dir="${build.base}/WEB-INF/lib" includes="atao-assessments.api-0.0.0.1.jar atao-assessments.impl-0.0.0.1.jar atao-assessments.model-0.0.0.1.jar"/>
                </delete>
            </else>
        </if>
      <record name="build.log" action="stop"/>
      
      <record name="deploy-developer.log" action="start"/>
     	  <ant antfile="${build.base}/build.xml" dir="${build.base}" inheritall="false">
     	  	<target name="jars"/>
     	  	<target name="deploy-developer-webapp"/>
     	  </ant>
          <delete>
              <fileset dir="${build.base}/WEB-INF/lib" includes="atao-assessments.api-0.0.0.1.jar atao-assessments.impl-0.0.0.1.jar atao-assessments.model-0.0.0.1.jar"/>
          </delete>     	  
      <record name="deploy-developer.log" action="stop"/>

      <antcall target="build-and-add-assessments"/>

      <record name="create-ear-release.log" action="start"/>
          <ant antfile="${build.base}/release.xml" dir="${build.base}" target="create-ear-release" inheritall="false"/>
      <record name="create-ear-release.log" action="stop"/>
    </target>


    <target name="build-and-add-assessments" description="Build Assessments and add components to aTao release vehicle" >
        <record name="assessments.log" action="start"/>
            <ant antfile="${build.baseRoot}/assessments/build.xml" dir="${build.baseRoot}/assessments" target="new-no-tests" inheritall="false"/>
            <ant antfile="${build.baseRoot}/assessments/build.xml" dir="${build.baseRoot}/assessments" target="exportddl" inheritall="false"/>
            <ant antfile="${build.baseRoot}/assessments/build.xml" dir="${build.baseRoot}/assessments" target="deploy-developer" inheritall="false"/>
            <!-- Add Assessment libraries, binaries and .sql to release vehicle -->
            <mkdir dir="${build.base}/relWorkArea/${atao.build.number}/wardir/WEB-INF/binaries"/>
            <copy todir="${build.base}/relWorkArea/${atao.build.number}/wardir/WEB-INF/binaries">
                <fileset dir="${build.baseRoot}/assessments/ScoringLibraries" includes="*.*"/>
            </copy>
            <mkdir dir="${build.base}/relWorkArea/${atao.build.number}/misc/sqlscripts/Assessments"/>
            <copy todir="${build.base}/relWorkArea/${atao.build.number}/misc/sqlscripts/Assessments">
                <fileset dir="${build.baseRoot}/assessments/misc/sqlscripts" includes="**/*.*"/>
            </copy>
            <mkdir dir="${build.base}/relWorkArea/${atao.build.number}/misc/sqlscripts/Assessments/ddl"/>
            <copy todir="${build.base}/relWorkArea/${atao.build.number}/misc/sqlscripts/Assessments/ddl">
                <fileset dir="${build.baseRoot}/assessments/output/ddl"/>
            </copy>
            <!-- Per RE-46, include the Assessments .csv files in 8.5 release vehicles -->
            <mkdir dir="${build.base}/relWorkArea/${atao.build.number}/misc/Assessments"/>
            <copy todir="${build.base}/relWorkArea/${atao.build.number}/misc/Assessments">
                <fileset dir="${build.baseRoot}/assessments/misc/Scoring" includes="**/*.csv"/>
            </copy>
        <record name="assessments.log" action="stop"/>
    </target>


    <target name="checkout-atao">
        <record name="checkout-atao.log" action="start"/>
            <move file="${build.baseRoot}.old" tofile="${build.baseRoot}.old.delete" failonerror="false"/>

            <!-- Decide whether to keep a backup of the previous checkout directory (may be safer but uses more space) -->
            <if>
                <equals arg1="${keep.build.files}" arg2="true" />
                <then>
                    <move file="${build.baseRoot}" tofile="${build.baseRoot}.old" failonerror="false"/>
                </then>
                <else>
                    <move file="${build.baseRoot}" tofile="${build.baseRoot}.delete" failonerror="false"/>
                </else>
            </if>

            <!-- Now check out a fresh copy and in parallel delete anything obsolete -->
            <echo message="=========> Check-out a fresh copy of revision ${CIfrom.revision} from ${svn.checkout.url}" level="info" />
            <parallel>
                <svncheckout from="${svn.checkout.url}" to="${build.base}" revision="${CIfrom.revision}" />
                <delete dir="${build.baseRoot}.delete"     failonerror="false"/>
                <delete dir="${build.baseRoot}.old.delete" failonerror="false"/>
            </parallel>
            <mkdir dir="${build.base}/WEB-INF/lib"/>
        <antcall target="checkout-assessments"/>
        <record name="checkout-atao.log" action="stop"/>
    </target>


    <target name="checkout-assessments">
        <record name="checkout-assessments.log" action="start"/>
            <echo message="=========> Check-out a fresh copy of revision ${ASSMNTfrom.revision} from ${svn.ASSMNTcheckout.url}" level="info" />
            <svncheckout from="${svn.ASSMNTcheckout.url}" to="${build.baseRoot}/assessments" revision="${ASSMNTfrom.revision}" />
        <record name="checkout-assessments.log" action="stop"/>
    </target>


    <target name="checkout-TMD-help">
        <record name="checkout-TMD-help.log" action="start"/>
            <svncheckout from="${svn.help.checkout.url}" to="${build.baseRoot}/HelpSource"/>
        <record name="checkout-TMD-help.log" action="stop"/>
    </target>


    <target name="cleanout-jboss-generated-files" depends="set-jboss-deploy-path">
        <parallel>
            <delete dir="${app.server.dir}/server/${jboss.deploy.path}/tmp"  failonerror="false"/>
            <delete dir="${app.server.dir}/server/${jboss.deploy.path}/work" failonerror="false"/>
            <delete dir="${app.server.dir}/server/${jboss.deploy.path}/data" failonerror="false"/>
        </parallel>
    </target>


    <target name="clover-report-generation">
        <ant antfile="${build.base}/build.xml" dir="${build.base}" inheritall="false">
            <target name="xml-clover-report"/>
            <target name="html-clover-report"/>
        </ant>
    </target>


    <target name="copy-buildtime-configfiles">
        <copy todir="${build.base}" overwrite="true" verbose="true">
        	<fileset dir="${buildtime.config.path}" includes="antLocalSettings.properties antGlobalLocalSettings.properties antReleaseLocalSettings.properties"/>
        </copy>
        <copy todir="${build.base}/misc/buildfiles" overwrite="true" verbose="true">
        	<fileset dir="${buildtime.config.path}" includes="custom.properties"/>
        </copy>
        <mkdir dir="${build.base}/WEB-INF/classes"/>
        <copy todir="${build.base}/WEB-INF/classes" overwrite="true" verbose="true">
        	<fileset dir="${buildtime.config.path}" includes="log4j.properties atao.hibernate.cfg.xml"/>
        </copy>
	<!-- Start Adding for Assessments build -->
        <copy todir="${build.baseRoot}/assessments">
	        <fileset dir="${buildtime.config.path}/assessments" includes="antLocalSettings.properties"/>
        </copy>
        <copy todir="${build.baseRoot}/assessments/test/artifacts">
	        <fileset dir="${buildtime.config.path}/assessments" includes="test.properties"/>
        </copy>
        <!-- End Adding for Assessments build -->
    </target>


    <target name="copy-import-config-files" description="Copy necessary config files to package dir to run import libraries step...">
        <copy todir="${package.base}" overwrite="true" verbose="true">
                <fileset dir="${packageinstall.config.path}" includes="antInstallLocalSettings.properties"/>
        </copy>
        <copy todir="${package.base}/wardir/WEB-INF/classes" overwrite="true" verbose="true">
                <fileset dir="${packageinstall.config.path}" includes="log4j.properties custom.properties"/>
        </copy>
    </target>


    <target name="copy-runtime-configfiles" depends="set-jboss-deploy-path" >
        <copy todir="${app.server.dir}/server/${jboss.deploy.path}/deploy/atao.ear/atao.war/WEB-INF/classes" overwrite="true" verbose="true">
            <fileset dir="${runtime.config.path}" includes="atao.hibernate.cfg.xml custom.properties log4j.properties c3p0.properties"/>
        </copy>
    </target>
    
    <target name="copy-webtest-file" description="Copy WebTest Sanity file to Web Test Dir.">
    	<copy todir="${build.base}/test/artifacts/webtest" overwrite="true" verbose="true">
    		<fileset dir="${basedir}" includes="testSanity.xml"/>
    	</copy>
    </target>


    <target name="deploy-ear" description="Deploy The atao.ear into JBoss Application Server" depends="set-jboss-deploy-path">
        <record name="deploy-ear.log" action="start"/>
            <move todir="${app.server.dir}/server/${jboss.deploy.path}/deploy/atao.ear/atao.warDir">
                <fileset dir="${app.server.dir}/server/${jboss.deploy.path}/deploy/atao.ear/atao.war" />
            </move>
            <unzip src="${package.base}/atao.ear" dest="${app.server.dir}/server/${jboss.deploy.path}/deploy/atao.ear"/>    
            <unzip src="${app.server.dir}/server/${jboss.deploy.path}/deploy/atao.ear/atao.war" dest="${app.server.dir}/server/${jboss.deploy.path}/deploy/atao.ear/atao.warDir"/>    
            <delete file="${app.server.dir}/server/${jboss.deploy.path}/deploy/atao.ear/atao.war"/>
            <move file="${app.server.dir}/server/${jboss.deploy.path}/deploy/atao.ear/atao.warDir" tofile="${app.server.dir}/server/${jboss.deploy.path}/deploy/atao.ear/atao.war" verbose="true"/>
        <record name="deploy-ear.log" action="stop"/>
    </target>


    <target name="import-libraries" description="Import client libraries..">
       <property file="${package.base}/antInstallLocalSettings.properties"/>

       <echo message="Creating ${package.base}/moduledependencies folder as a temporary work around..." level="info"/>
       <mkdir dir="${package.base}/moduledependencies"/>
       <echo message="target db for import libraries is ${target.db}" level="info"/>
       
       <record name="libraryimport.log" action="start"/>
           <ant antfile="${package.base}/install.xml" dir="${package.base}" target="install" inheritall="false">
               <property name="install.target.list2" value="import-all"/>
               <property name="target.db" value="${target.db}"/>
               <property name="core.lib.dir"   value="${package.base}/libs"/>
           </ant>
       <record name="libraryimport.log" action="stop"/>
    </target>


    <target name="prepare-appserver-for-deployment" depends="set-jboss-deploy-path" >
        <!-- Decide whether to keep a backup of the previous jboss directory (may be safer but takes longer and uses more space) -->
        <if>
            <equals arg1="${backup.existing.deployment}" arg2="true" />
            <then>
        <!-- Have to do this in an antcall so atao.build.number won't be 
             set to previous/old value for the remainder of this build -->
        <antcall target="backup-existing-deployment"/>
            </then>
        </if>
        <!-- Delete previously deployed .ear directory so packaging step
             can create new .ear dir & deploy assets/static there -->
        <delete dir="${app.server.dir}/server/${jboss.deploy.path}/deploy/atao.ear" failonerror="true"/>
        <!-- Verify that delete was successful-->
        <available file="${app.server.dir}/server/${jboss.deploy.path}/deploy/atao.ear" property="appserver.ear.previous.notDeleted"/>
        <fail if="appserver.ear.previous.notDeleted" message="Previous deployed appserver ear not deleted"/>
    </target>


    <target name="preserve-file-system-assets" description="copy file system assets from build to build" depends="set-jboss-deploy-path">
        <property file="${package.base}/antCommonSettings.properties"/>
        <delete dir="assets.previous" failonerror="false"/>
        <copy todir="assets.previous" overwrite="true">
            <fileset dir="${app.server.dir}.old/server/${jboss.deploy.path}/deploy/atao.ear/atao.war/assets" includes="**"/>
        </copy>
        <!-- Zip up a copy of the pre-build assets directory so it can be preserved as a build artifact-->
        <zip destfile="fileAssets-prebuild.zip">
            <fileset dir="assets.previous" includes="**/*.*"/>
        </zip>
        <for list="${library.list}" param="library">
            <sequential>
                <echo message="=========> deleting Library:@{library} " level="info" />
                <delete dir="assets.previous/@{library}"/>
            </sequential>
        </for>
     	<copy todir="${app.server.dir}/server/${jboss.deploy.path}/deploy/atao.ear/atao.war/assets" overwrite="true">
     		<fileset dir="assets.previous" includes="**"/>
    	</copy>
        <!-- post-build assets directory should also be preserved-->
        <zip destfile="fileAssets-postbuild.zip">
            <fileset dir="${app.server.dir}/server/${jboss.deploy.path}/deploy/atao.ear/atao.war/assets" includes="**/*.*"/>
        </zip>
    </target>


    <target name="preserve-static-contents" description="copy static files from build to build" depends="set-jboss-deploy-path">
        <delete dir="static.previous" failonerror="false"/>
        <copy todir="static.previous" overwrite="true">
            <fileset dir="${app.server.dir}.old/server/${jboss.deploy.path}/deploy/atao.ear/atao.war/static" includes="**"/>
        </copy>
        <!-- Zip up a copy of the pre-build assets directory so it can be preserved as a build artifact-->
        <zip destfile="staticFiles-prebuild.zip">
            <fileset dir="static.previous" includes="**/*.*"/>
        </zip>         
        <available file="Preserve-Static-Contents.sh" property="static.script.present"/>
        <if>
        <equals arg1="${static.script.present}" arg2="true" />
        <then>
            <fixcrlf srcDir="${basedir}" includes="Preserve-Static-Contents.sh" eol="lf"/>
            <chmod file="${basedir}/Preserve-Static-Contents.sh" perm="ugo+rwx"/>
 	    <exec executable="${basedir}/Preserve-Static-Contents.sh" failonerror="yes">
   	        <arg value="${jboss.deploy.path}"/>
            </exec>  
        </then>
        <else>
            <echo message="=========> Didn't find file Preserve-Static-Contents.sh." level="info" />
            <echo message="=========> Can't Copy static contents.." level="info" />
            <fail message="Static Content Copy failed!" />
        </else>
        </if>
        <!-- post-build static directory should also be preserved-->
        <zip destfile="staticFiles-postbuild.zip">
            <fileset dir="${app.server.dir}/server/${jboss.deploy.path}/deploy/atao.ear/atao.war/static" includes="**/*.*"/>
        </zip>         
    </target>


    <target name="run-caladan-upgrade-sql">
        <record name="Upgrade_Script.log" action="start"/>
            <xmlproperty file="${app.server.dir}/server/${jboss.deploy.path}/deploy/atao-ds.xml"/>
            <property name="db.user" value="${datasources.local-tx-datasource.user-name}"/>
            <property name="db.pass" value="${datasources.local-tx-datasource.password}"/>
        
            <echo message="User: ${db.user}"/>
            <echo message="Password: ${db.pass}"/>
        
            <sqlplus logon="${db.user}/${db.pass}@${db.tnsname}" start="${build.base}/misc/sqlscripts/upgrades/${upgrade.sql}" failonerror="true"/>
        <record name="Upgrade_Script.log" action="stop"/>
    </target>


    <target name="run-cleanup-sql">
        <record name="Table_Cleanup_Script.log" action="start"/>
            <xmlproperty file="${app.server.dir}/server/${jboss.deploy.path}/deploy/atao-ds.xml"/>
            <property name="db.user" value="${datasources.local-tx-datasource.user-name}"/>
            <property name="db.pass" value="${datasources.local-tx-datasource.password}"/>
            
            <echo message="User: ${db.user}"/>
            <echo message="Password: ${db.pass}"/>
            
            <sqlplus logon="${db.user}/${db.pass}@${db.tnsname}" start="${build.base}/misc/sqlscripts/${cleanup.sql}" failonerror="true"/>
        <record name="Table_Cleanup_Script.log" action="stop"/>
    </target>


    <target name="run-webtest-sanity" depends="copy-webtest-file">
        <record name="webtest.log" action="start"/>
            <ant antfile="${build.base}/antFunctionalTests.xml" dir="${build.base}" inheritall="false" target="functional-test">
            	<property name="webtest.testfile" value="testSanity"/>
            </ant>
        <record name="webtest.log" action="stop"/>
    </target>


    <target name="setup-assessmentbuild-number">
        <svnrevget path="${build.baseRoot}/assessments" revisionproperty="assmnt.chkout.revision"/>
    	<echo> Checked-out Revision of Code: ${assmnt.chkout.revision} </echo>
        <echo> Build number root           : ${build.number.root} </echo>
        <property name="assmnt.build.number" value="${build.number.root}.${assmnt.chkout.revision}.1"/>
        <echo> set atao.build.number to ${assmnt.build.number} in ${build.baseRoot}/assessments/antLocalSettings.properties </echo>
        <echo file="${build.baseRoot}/assessments/antLocalSettings.properties" append="true">atao.build.number=${assmnt.build.number}</echo>
        <property file="${build.baseRoot}/assessments/antLocalSettings.properties"/>
    </target>


    <target name="setup-build-number">
        <svnrevget path="${build.base}" revisionproperty="chkout.revision"/>
    	<echo> Checked-out Revision of Code: ${chkout.revision} </echo>
        <echo> Build number root           : ${build.number.root} </echo>
        <property name="atao.build.number" value="${build.number.root}.${chkout.revision}.1"/>
        <echo> set atao.build.number to ${atao.build.number} in antGlobalLocalSettings.properties </echo>
        <replaceregexp file="${build.base}/antGlobalLocalSettings.properties" match="atao.build.number=.*" replace="atao.build.number=${atao.build.number}" flags="g" byline="true"/>
        <property file="${build.base}/antGlobalLocalSettings.properties"/>
    </target>


    <target name="set-jboss-deploy-path">
        <condition property="jboss.deploy.path" value="default">
            <equals arg1="${ant.java.version}" arg2="1.4" />
        </condition>
        <condition property="jboss.deploy.path" value="production">
            <equals arg1="${ant.java.version}" arg2="1.5" />
        </condition>
        <condition property="jboss.deploy.path" value="production">
            <equals arg1="${ant.java.version}" arg2="1.6" />
        </condition>
        <echo message="Java version = ${ant.java.version} so deploy path = server/${jboss.deploy.path}/deploy"/>
    </target>


    <target name="setup-static-directory" depends="set-jboss-deploy-path" >
        <copy todir="${app.server.dir}/server/${jboss.deploy.path}/deploy/atao.ear/atao.war/applications" overwrite="true">
            <fileset dir="${package.base}/core/static"/>
        </copy>
    </target>

 
    <target name="start-jboss43" description="Start the JBoss 4.3 server." depends="cleanout-jboss-generated-files">
        <echo message="===> java.home value is ${java.home.dir}" level="info" />
        
        <available file="antRunAsync.sh" property="antRunAsync.script.present"/>
        <if>
        <equals arg1="${antRunAsync.script.present}" arg2="true" />
        <then>
              <fixcrlf srcDir="${basedir}" includes="antRunAsync.sh" eol="lf"/>
              
              <chmod file="${basedir}/antRunAsync.sh" perm="ugo+rwx"/>
        
	      <exec executable="${basedir}/antRunAsync.sh" failonerror="yes">
   	      <env key="ANTRUN_NOHUP" value="true" />
  	      <arg value="run.sh" />
  	      <arg line=" -b 0.0.0.0"/>
  	      <arg line="-g ${cluster.group}"/>
  	      <arg line="-u ${udp.address}"/>
 	      </exec>
 	      
	      <property name="startup.delay" value="240"/>
              <echo message="=========> Waiting ${startup.delay} seconds for ${app.server.dir} to start" level="info" />
              <sleep seconds="${startup.delay}" />   
        </then>
        <else>
              <echo message="=========> Didn't find file antRunAsync.sh." level="info" />
              <echo message="=========> Can't Start the JBoss 4.3 server." level="info" />
              <fail message="JBoss 4.3 server Start-Up failed!" />
        </else>
        </if>
    </target>


    <target name="stop-jboss43" description="Stop the Application Server">
        <echo message="===> app.server.dir value is ${app.server.dir}" level="info" />
        <echo message="===> deploy.configuration.dir value is ${deploy.configuration.dir}" level="info" />
        <echo message="=========> Stopping JBoss Server at ${jboss.host} : ${jboss.jndi.port}" level="info" />
        <java dir="${app.server.dir}/bin" classname="org.jboss.Shutdown" fork="true">
            <arg line="--server=${jboss.host}:${jboss.jndi.port}"/>
            <arg value="--user" />
            <arg value="admin" />
            <arg value="--password" />
            <arg value="admin" />
            <classpath>
                <pathelement path="${app.server.dir}/bin/shutdown.jar"/>
                <pathelement path="${app.server.dir}/client/jbossall-client.jar"/>
            </classpath>
        </java>
        <property name="shutdown.delay" value="35"/>
        <echo message="=========> Waiting ${shutdown.delay} seconds for ${app.server.dir} to stop" level="info" />
        <sleep seconds="${shutdown.delay}"/>
    </target>


    <target name="unzip-and-package-release">
        <if>
            <!--Decide whether to keep a backup of the previous 
                checkout directory (may be safer but uses more space) -->
            <equals arg1="${keep.build.files}" arg2="true" />
            <then>
                <!-- First delete previous backup workarea -->
                <delete dir="${package.base}.old" failonerror="false"/>
                <!-- then move previous workarea to backup -->
                <move file="${package.base}" tofile="${package.base}.old" failonerror="false"/>
            </then>
            <else>
                <delete dir="${package.base}" failonerror="true"/>
            </else>
        </if>
        <!-- Now create a packageWorkDir -->
        <mkdir dir="${package.base}"/>
        <!-- And unzip the release zip into package.base -->
    	<unzip src="${build.base}/relWorkArea/${atao.build.number}.zip" dest="${package.base}"/>
        <!-- Copy the config files for packaging -->
        <copy todir="${package.base}" verbose="true" overwrite="true">
            <fileset dir="${packageinstall.config.path}" includes="antLocalSettings.properties antPackageLocalSettings.properties"/>
        </copy>
        <copy todir="${package.base}/WEB-INF/classes" verbose="true" overwrite="true">
            <fileset dir="${packageinstall.config.path}" includes="log4j.properties atao.hibernate.cfg.xml"/>
        </copy>
        <copy todir="${package.base}/libs" verbose="true" overwrite="true">
            <fileset dir="${packageinstall.config.path}" includes="atao.hibernate.cfg.xml"/>
        </copy>
        <!-- Now run the package.xml to create the atao.ear -->
        <record name="package-ear-release.log" action="start"/>
            <ant antfile="${package.base}/package.xml" dir="${package.base}" inheritall="false" target="package-ear-release">
            </ant>
        <record name="package-ear-release.log" action="stop"/>
    </target>    

 
    <target name="verify-processes">
        <exec executable="verifyProcesses.sh" os=" Linux "/>
        <property file="processes.properties"/>
        <fail message="Xvfb not running - please start it (as root) before continuing">
            <condition>
                <isfalse value="${xvfb.running}"/>
            </condition>
        </fail>
        <fail message="ColdFusion is running - please kill all CF processes before continuing">
            <condition>
                <istrue value="${coldfusion.running}"/>
            </condition>
        </fail>
    </target>

</project>
